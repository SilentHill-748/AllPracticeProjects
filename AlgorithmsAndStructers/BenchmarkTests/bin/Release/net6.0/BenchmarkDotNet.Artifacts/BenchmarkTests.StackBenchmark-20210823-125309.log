// Validating benchmarks:
// ***** BenchmarkRunner: Start   *****
// ***** Found 4 benchmark(s) in total *****
// ***** Building 1 exe(s) in Parallel: Start   *****
// start dotnet restore  /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 /p:Deterministic=true /p:Optimize=true in D:\Кодинг\Проекты C# (VS Community)\Практика и уроки\AlgorithmsAndStructers\BenchmarkTests\bin\Release\net6.0\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6
// command took 1,92s and exited with 0
// start dotnet build -c Release  --no-restore /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 /p:Deterministic=true /p:Optimize=true in D:\Кодинг\Проекты C# (VS Community)\Практика и уроки\AlgorithmsAndStructers\BenchmarkTests\bin\Release\net6.0\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6
// command took 13,6s and exited with 1
// start dotnet build -c Release  --no-restore --no-dependencies /p:UseSharedCompilation=false /p:BuildInParallel=false /m:1 /p:Deterministic=true /p:Optimize=true in D:\Кодинг\Проекты C# (VS Community)\Практика и уроки\AlgorithmsAndStructers\BenchmarkTests\bin\Release\net6.0\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6
// command took 3,7s and exited with 0
// ***** Done, took 00:00:19 (19.35 sec)   *****
// Found 4 benchmarks:
//   StackBenchmark.DefaultListBenchmarkPush: DefaultJob
//   StackBenchmark.MyListBenchmarkPush: DefaultJob
//   StackBenchmark.DefaultListBenchmarkPop: DefaultJob
//   StackBenchmark.MyListBenchmarkPop: DefaultJob

// **************************
// Benchmark: StackBenchmark.DefaultListBenchmarkPush: DefaultJob
// *** Execute ***
// Launch: 1 / 1
// Execute: dotnet "02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6.dll" --benchmarkName "BenchmarkTests.StackBenchmark.DefaultListBenchmarkPush" --job "Default" --benchmarkId 0 in D:\Кодинг\Проекты C# (VS Community)\Практика и уроки\AlgorithmsAndStructers\BenchmarkTests\bin\Release\net6.0\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6\bin\Release\net6.0
// BeforeAnythingElse

// Benchmark Process Environment Information:
// Runtime=.NET 6.0.0 (6.0.21.37719), X64 RyuJIT
// GC=Concurrent Workstation
// Job: DefaultJob

OverheadJitting  1: 1 op, 276500.00 ns, 276.5000 us/op
WorkloadJitting  1: 1 op, 481100.00 ns, 481.1000 us/op

OverheadJitting  2: 16 op, 234700.00 ns, 14.6687 us/op
WorkloadJitting  2: 16 op, 2517300.00 ns, 157.3313 us/op

WorkloadPilot    1: 16 op, 1253700.00 ns, 78.3563 us/op
WorkloadPilot    2: 32 op, 2097500.00 ns, 65.5469 us/op
WorkloadPilot    3: 64 op, 4058900.00 ns, 63.4203 us/op
WorkloadPilot    4: 128 op, 8647900.00 ns, 67.5617 us/op
WorkloadPilot    5: 256 op, 21569300.00 ns, 84.2551 us/op
WorkloadPilot    6: 512 op, 42290700.00 ns, 82.5990 us/op
WorkloadPilot    7: 1024 op, 81240300.00 ns, 79.3362 us/op
WorkloadPilot    8: 2048 op, 166523000.00 ns, 81.3101 us/op
WorkloadPilot    9: 4096 op, 342851300.00 ns, 83.7039 us/op
WorkloadPilot   10: 8192 op, 703854900.00 ns, 85.9198 us/op

OverheadWarmup   1: 8192 op, 29100.00 ns, 3.5522 ns/op
OverheadWarmup   2: 8192 op, 27000.00 ns, 3.2959 ns/op
OverheadWarmup   3: 8192 op, 29200.00 ns, 3.5645 ns/op
OverheadWarmup   4: 8192 op, 37800.00 ns, 4.6143 ns/op
OverheadWarmup   5: 8192 op, 28200.00 ns, 3.4424 ns/op
OverheadWarmup   6: 8192 op, 26400.00 ns, 3.2227 ns/op
OverheadWarmup   7: 8192 op, 27600.00 ns, 3.3691 ns/op
OverheadWarmup   8: 8192 op, 26100.00 ns, 3.1860 ns/op

OverheadActual   1: 8192 op, 32300.00 ns, 3.9429 ns/op
OverheadActual   2: 8192 op, 29500.00 ns, 3.6011 ns/op
OverheadActual   3: 8192 op, 37600.00 ns, 4.5898 ns/op
OverheadActual   4: 8192 op, 22800.00 ns, 2.7832 ns/op
OverheadActual   5: 8192 op, 31700.00 ns, 3.8696 ns/op
OverheadActual   6: 8192 op, 44500.00 ns, 5.4321 ns/op
OverheadActual   7: 8192 op, 27100.00 ns, 3.3081 ns/op
OverheadActual   8: 8192 op, 34200.00 ns, 4.1748 ns/op
OverheadActual   9: 8192 op, 31100.00 ns, 3.7964 ns/op
OverheadActual  10: 8192 op, 29400.00 ns, 3.5889 ns/op
OverheadActual  11: 8192 op, 26900.00 ns, 3.2837 ns/op
OverheadActual  12: 8192 op, 29600.00 ns, 3.6133 ns/op
OverheadActual  13: 8192 op, 31600.00 ns, 3.8574 ns/op
OverheadActual  14: 8192 op, 38200.00 ns, 4.6631 ns/op
OverheadActual  15: 8192 op, 32100.00 ns, 3.9185 ns/op
OverheadActual  16: 8192 op, 29800.00 ns, 3.6377 ns/op
OverheadActual  17: 8192 op, 33600.00 ns, 4.1016 ns/op
OverheadActual  18: 8192 op, 32700.00 ns, 3.9917 ns/op
OverheadActual  19: 8192 op, 30800.00 ns, 3.7598 ns/op
OverheadActual  20: 8192 op, 30800.00 ns, 3.7598 ns/op

WorkloadWarmup   1: 8192 op, 436055800.00 ns, 53.2295 us/op
WorkloadWarmup   2: 8192 op, 868096500.00 ns, 105.9688 us/op
WorkloadWarmup   3: 8192 op, 442203000.00 ns, 53.9799 us/op
WorkloadWarmup   4: 8192 op, 412814500.00 ns, 50.3924 us/op
WorkloadWarmup   5: 8192 op, 1352255600.00 ns, 165.0703 us/op
WorkloadWarmup   6: 8192 op, 482713600.00 ns, 58.9250 us/op

// BeforeActualRun
WorkloadActual   1: 8192 op, 429875900.00 ns, 52.4751 us/op
WorkloadActual   2: 8192 op, 446740000.00 ns, 54.5337 us/op
WorkloadActual   3: 8192 op, 441631800.00 ns, 53.9101 us/op
WorkloadActual   4: 8192 op, 426765600.00 ns, 52.0954 us/op
WorkloadActual   5: 8192 op, 435446300.00 ns, 53.1551 us/op
WorkloadActual   6: 8192 op, 7141075400.00 ns, 871.7133 us/op
WorkloadActual   7: 8192 op, 483653000.00 ns, 59.0397 us/op
WorkloadActual   8: 8192 op, 465942200.00 ns, 56.8777 us/op
WorkloadActual   9: 8192 op, 465163700.00 ns, 56.7827 us/op
WorkloadActual  10: 8192 op, 477011300.00 ns, 58.2289 us/op
WorkloadActual  11: 8192 op, 436637800.00 ns, 53.3005 us/op
WorkloadActual  12: 8192 op, 446982100.00 ns, 54.5632 us/op
WorkloadActual  13: 8192 op, 433118000.00 ns, 52.8708 us/op
WorkloadActual  14: 8192 op, 451339700.00 ns, 55.0952 us/op
WorkloadActual  15: 8192 op, 468875100.00 ns, 57.2357 us/op
WorkloadActual  16: 8192 op, 442766800.00 ns, 54.0487 us/op
WorkloadActual  17: 8192 op, 455813600.00 ns, 55.6413 us/op
WorkloadActual  18: 8192 op, 478090400.00 ns, 58.3606 us/op

OutOfMemoryException!
BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.
If your benchmark allocates memory and keeps it alive, you are creating a memory leak.
You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.

System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.
 ---> System.OutOfMemoryException: Array dimensions exceeded supported range.
   at System.Array.Resize[T](T[]& array, Int32 newSize) in System.Private.CoreLib.dll:token 0x6000182+0x22
   at System.Collections.Generic.Stack`1.Grow(Int32 capacity) in System.Collections.dll:token 0x6000261+0x2d
   at System.Collections.Generic.Stack`1.PushWithResize(T item) in System.Collections.dll:token 0x600025f+0x0
   at BenchmarkTests.StackBenchmark.DefaultListBenchmarkPush() in D:\������\�஥��� C# (VS Community)\�ࠪ⨪� � �ப�\AlgorithmsAndStructers\BenchmarkTests\StackBenchmark.cs:line 23
   at BenchmarkDotNet.Autogenerated.Runnable_0.WorkloadActionUnroll(Int64 invokeCount) in D:\������\�஥��� C# (VS Community)\�ࠪ⨪� � �ப�\AlgorithmsAndStructers\BenchmarkTests\bin\Release\net6.0\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6.notcs:line 831
   at BenchmarkDotNet.Engines.Engine.RunIteration(IterationData data) in BenchmarkDotNet.dll:token 0x6000997+0x91
   at BenchmarkDotNet.Engines.EngineActualStage.RunAuto(Int64 invokeCount, IterationMode iterationMode, Int32 unrollFactor) in BenchmarkDotNet.dll:token 0x60009be+0x39
   at BenchmarkDotNet.Engines.EngineActualStage.Run(Int64 invokeCount, IterationMode iterationMode, Boolean runAuto, Int32 unrollFactor, Boolean forceSpecific) in BenchmarkDotNet.dll:token 0x60009bd+0x3a
   at BenchmarkDotNet.Engines.EngineActualStage.RunWorkload(Int64 invokeCount, Int32 unrollFactor, Boolean forceSpecific) in BenchmarkDotNet.dll:token 0x60009bc+0x0
   at BenchmarkDotNet.Engines.Engine.Run() in BenchmarkDotNet.dll:token 0x6000996+0x94
   at BenchmarkDotNet.Autogenerated.Runnable_0.Run(IHost host, String benchmarkName) in D:\������\�஥��� C# (VS Community)\�ࠪ⨪� � �ப�\AlgorithmsAndStructers\BenchmarkTests\bin\Release\net6.0\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6.notcs:line 172
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Span`1& arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in System.Private.CoreLib.dll:token 0x6005405+0x78
   at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters) in System.Private.CoreLib.dll:token 0x6005309+0x0
   at BenchmarkDotNet.Autogenerated.UniqueProgramName.AfterAssemblyLoadingAttached(String[] args) in D:\������\�஥��� C# (VS Community)\�ࠪ⨪� � �ப�\AlgorithmsAndStructers\BenchmarkTests\bin\Release\net6.0\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6\02da98f2-f1ce-4c6e-a9ee-abfbb4044fe6.notcs:line 54
// AfterAll
// Benchmark Process 9404 has exited with code -1.
// * Artifacts cleanup *
